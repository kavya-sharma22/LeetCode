# Shortest Common Supersequence (LeetCode 1092)

## Problem Statement

Given two strings `str1` and `str2`, return the shortest string that has both `str1` and `str2` as subsequences. If there are multiple valid strings, return any of them.

A string `s` is a subsequence of string `t` if deleting some number of characters from `t` (possibly 0) results in the string `s`.

## Examples

### Example 1:

**Input:**

```
str1 = "abac", str2 = "cab"
```

**Output:**

```
"cabac"
```

**Explanation:**

- `str1 = "abac"` is a subsequence of `"cabac"` because we can delete the first `c`.
- `str2 = "cab"` is a subsequence of `"cabac"` because we can delete the last `ac`.

### Example 2:

**Input:**

```
str1 = "aaaaaaaa", str2 = "aaaaaaaa"
```

**Output:**

```
"aaaaaaaa"
```

## Constraints

- `1 <= str1.length, str2.length <= 1000`
- `str1` and `str2` consist of lowercase English letters.

## Solution Approach

We solve this problem efficiently using **Dynamic Programming (DP)**.

### Key Observations:

- We use a **DP table**, where `dp[i][j]` represents the shortest common supersequence of `str1[0..i-1]` and `str2[0..j-1]`.
- If `str1[i-1] == str2[j-1]`, extend the sequence from `dp[i-1][j-1]`.
- If characters do not match, take the shorter sequence from either the previous row (`dp[i-1][j]`) or the previous column (`dp[i][j-1]`).
- Finally, reconstruct the **shortest common supersequence** using the DP table.

## Java Solution

```java
class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int str1Length = str1.length();
        int str2Length = str2.length();

        // Initialize the first row (when str1 is empty, the supersequence is str2's prefix)
        String[] prevRow = new String[str2Length + 1];
        for (int col = 0; col <= str2Length; col++) {
            prevRow[col] = str2.substring(0, col);
        }

        // Fill the DP table row by row
        for (int row = 1; row <= str1Length; row++) {
            // Initialize the first column (when str2 is empty, the supersequence is str1's prefix)
            String[] currRow = new String[str2Length + 1];
            currRow[0] = str1.substring(0, row);

            for (int col = 1; col <= str2Length; col++) {
                // If characters match, extend the supersequence from the diagonal value
                if (str1.charAt(row - 1) == str2.charAt(col - 1)) {
                    currRow[col] = prevRow[col - 1] + str1.charAt(row - 1);
                } else {
                    // If characters do not match, choose the shorter supersequence
                    String pickS1 = prevRow[col];
                    String pickS2 = currRow[col - 1];

                    currRow[col] = (pickS1.length() < pickS2.length())
                        ? pickS1 + str1.charAt(row - 1)
                        : pickS2 + str2.charAt(col - 1);
                }
            }
            // Move to the next row (update previous row reference)
            prevRow = currRow;
        }

        // Return the shortest common supersequence from the last cell
        return prevRow[str2Length];
    }
}
```

## Complexity Analysis

- **Time Complexity:** `O(m * n)`, where `m` and `n` are the lengths of `str1` and `str2`. Each cell in the DP table is computed once.
- **Space Complexity:** `O(n)`, as only two rows of the DP table are maintained at a time.

## References

- [LeetCode Problem 1092](https://leetcode.com/problems/shortest-common-supersequence/)

